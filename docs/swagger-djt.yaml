openapi: 3.0.0
# XBRL US API
servers:
  - description: Running this application XBRL US server
    url: 'https://api.xbrl.us'
info:
  version: "V1"
  title: XBRL US API
  description: |
    This API defines the XBRL US API. 

    ## Authorization Flow

    We use [OAuth2 JWT](https://jwt.io/) flows to secure interactions.

    ## Example Interactions

    In this section, we will provide __CURL__ examples for typical __XBRL US API__ flows. Because XBRL US API is sessionless, each "session" will always begin with the [OAuth2 JWT Access Token Flow](https://jwt.io/introduction).

    ### Access Token Flow

    This flow shows the steps required to interact with the API

    1. Send an HTTP `POST` request to the tokenUrl: `/oauth2/token`:
      ```http
      POST /oauth2/token HTTP/1.1 
      Host: <api.xbrl.us> 
      Content-Type: application/x-www-form-urlencoded 
      Body: {
        "grant_type": password,
        "client_id": "XBRL US Client",
        "client_secret": "client secret",
        "username": "username",
        "password": "password",
        "platform": pc
      }
      ```
    2. Upon a successful authorization grant, the server will respond with an `access_token`:
      ```http
      HTTP/1.1 200 OK
      Request URL: <example.com>/oauth2/token
      Date: <EEE, dd MMM yyyy HH:mm:ss z>
      Content-Length: 500
      Body: {
        "platform": "pc",
        "access_token": "eyJ...124nOvc",
        "refresh_token": "eyJ...124nOvc",
        "expires_in" : 3600,
        "refresh_token_expires_in": 10800,
        "token_type": "bearer"
      }
      ```
    3. Add a new `Authorization` header with type `Bearer` and the contents of the above `access_token`
      ```http
      GET </some/route> HTTP/1.1
      Host: <api.xbrl.us> 
      Authorization: Bearer yJ...124nOvc
      Content-Type: application/json; charset=utf-8 
      Body: <...>
      ```

    Once an `access_token` has been acquired, use it until it returns a `401`. If this occurs, simply request a new token using the credentials from before. 


  
  contact:
    name: xbrl.us
    email: support@xbrl.us
tags:
  - name: oauth2
    description: Operations to request authorization, receive tokens, and check tokens
  - name: Facts
    description: Used to request XBRL Facts
  - name: Reports
    description: Used to get information on XBRL reports
  - name: Assertions
    description: Used to get information on errors in XBRL reports
  - name: Concepts
    description: Used to information about XBRL concepts in a taxonomy
security:
  - oauth2: [ROLE_CLIENT, ROLE_USER]
paths:
  /api/v1/document/search:
      summary: Request networks and relationships from XBRL filings based on search parameters.
      get:
        operationId: getDocumentInfo
        tags: [Documents]
        security:
          - bearerAuth: []
        description: >
          Allows searching for XBRL documents and their content.
        parameters:
          - $ref: '#/components/parameters/document.top-level_Param'
          - $ref: '#/components/parameters/document.uri_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/document_fields' 
                
            description: List of concepts to return.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/document_details'
                     
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'   
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth2/token
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    authorization_grant:
      type: object
      required: [grant_type, client_id, client_secret]
      properties:
        grant_type:
          type: string
          example: password
          description: >
            Used to identify which credentials the authorization server needs to check
              * `client_credentials` - Requires a client_id and client_secret only
              * `password` - Requires a username and password as well as client_id and client_secret
        client_id:
          type: string
          example: XBRL US
          description: Unique identifier agreed upon by **XBRL US** and the 3rd party client
        client_secret:
          type: string
          example: xhOEnAX2M...gaIYLXOvCe25Q
          format: byte
          description: Base64 key used to authenticate the 3rd party client
        username:
          type: string
          example: campbell.pryde@xbrl.us
          description: Unique identifier for a given user
        password:
          type: string
          example: someSecurePassword
          description: Password used to authenticate the 3rd party user
        platform:
          type: string
          example: pc
          description: just required
    error_message:
      type: object
      properties:
        error:
          type: string
          description: Identifier for the error
        error_description:
          type: string
          description: Adds more details to the error
          
    document_details: 
      type: object
      properties:
        document.top-level:
          $ref: '#/components/schemas/document_top-level'
        document.tree-level:
          $ref: '#/components/schemas/document_tree-level'
        document.tree-order:
          $ref: '#/components/schemas/document_tree-order'
        document.type:
          $ref: '#/components/schemas/document_type'
        document.uri:
          $ref: '#/components/schemas/document_uri'
        dts.content:
          $ref: '#/components/schemas/dts_content'
        dts.id:
          $ref: '#/components/schemas/dts_id'
    
    document_fields:
      type: array
      items:
        type: string
        enum: [
              document.top-level
              ,document.tree-level
              ,document.tree-order
              ,document.type
              ,document.uri
              ,dts.id
              ,document.*
              ]
    document_top-level:
      type: boolean
      description: Boolean that indicates if the file in a dts is the entry point.
      example: true
  
    document_tree-level:
      type: integer
      description: Level of the files in terms of which files import or reference child files.
      example: 2
      
    document_tree-order:
      type: integer
      description: Order of the files in terms of how the dts is compiled from the underlying documents.
      example: 2
      
    document_type:
      type: string
      description: Indicates if the document is a schema, linkbase or instance.
      example: 'inline'
      
    document_uri:
      type: string
      format: uri
      description: The url at which the document comprising the dts is located..
      example: 'http://www.sec.gov/Archives/edgar/data/46619/000004661918000117/hei1031201810k.htm'
      
    dts_content:
      type: string
      description: Contents of the document
      example: 'Contents of the file contains .....'
      
    
    dts_id:
      type: integer
      description: The dts identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
      example: 1
      
  parameters:    
    document.top-level_Param:
      in: query
      name: document.top-level
      schema:
          type: boolean
      description: Boolean that indicates if the file in a dts is the entry point.
      
    document.uri_Param:
      in: query
      name: document.uri
      schema:
          type: boolean
      description: The url at which the document comprising the dts is located.
      
    dts.id_Param:
        in: query
        name: dts.id
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
        description: The dts identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
        example: 321964
  responses:
    bad_request:
      description: >
        Malformed request or missing fields. Check that Content-Type matches the format/encoding, and that all required fields are spelled correctly, have correct types, and valid values. 
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            error: bad_request
            error_description: Missing a field 'xxx'
    bad_token:
      description: The token is invalid, expired, or corrupted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            error: unauthorized,
            error_description: Cannot convert access token to JSON
    unauthorized:
      description: >
        Bad credentials, or could not read credentials due to malformed JSON
         * "Full authentication is required..." -> malformed JSON
         * "Bad client credentials" -> client_id/client_secret pair invalid
         * "Bad credentials" -> username/password pair invalid
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            error: unauthorized
            error_description: Full authentication is required to access this resource
    not_found:
      description: This resource doesn't exist or you don't have the permissions to view it
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example: 
            error: not_found
            error_description: An entity with that name could not be found
    method_not_allowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example: 
            error: method_not_allowed
            error_description: Request method 'DELETE' not supported
    internal_server_error:
      description: Internal error, not the fault of the client
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example: 
            error: internal_error
            error_description: Unknown error, try again later